(()=>{"use strict";var e={508:(e,t,n)=>{e.exports=n.p+"ab9caef99faaddb8888d.wasm"}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.m=e,n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!e;)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{let e;const t="undefined"!=typeof TextDecoder?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};"undefined"!=typeof TextDecoder&&t.decode();let r=null;function i(){return null!==r&&0!==r.byteLength||(r=new Uint8Array(e.memory.buffer)),r}function o(e,n){return e>>>=0,t.decode(i().subarray(e,e+n))}const c=new Array(128).fill(void 0);c.push(void 0,null,!0,!1);let a=c.length,s=0;const d="undefined"!=typeof TextEncoder?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}},l="function"==typeof d.encodeInto?function(e,t){return d.encodeInto(e,t)}:function(e,t){const n=d.encode(e);return t.set(n),{read:e.length,written:n.length}};function u(e,t,n){if(void 0===n){const n=d.encode(e),r=t(n.length,1)>>>0;return i().subarray(r,r+n.length).set(n),s=n.length,r}let r=e.length,o=t(r,1)>>>0;const c=i();let a=0;for(;a<r;a++){const t=e.charCodeAt(a);if(t>127)break;c[o+a]=t}if(a!==r){0!==a&&(e=e.slice(a)),o=n(o,r,r=a+3*e.length,1)>>>0;const t=i().subarray(o+a,o+r);a+=l(e,t).written}return s=a,o}let f=null;function p(){return null!==f&&0!==f.byteLength||(f=new Int32Array(e.memory.buffer)),f}function m(e){const t=function(e){return c[e]}(e);return function(e){e<132||(c[e]=a,a=e)}(e),t}let h=null;async function g(t){if(void 0!==e)return e;void 0===t&&(t=new URL(n(508),n.b));const i=function(){const e={wbg:{}};return e.wbg.__wbindgen_string_new=function(e,t){return function(e){a===c.length&&c.push(c.length+1);const t=a;return a=c[t],c[t]=e,t}(o(e,t))},e}();("string"==typeof t||"function"==typeof Request&&t instanceof Request||"function"==typeof URL&&t instanceof URL)&&(t=fetch(t));const{instance:s,module:d}=await async function(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}(await t,i);return function(t,n){return e=t.exports,g.__wbindgen_wasm_module=n,f=null,h=null,r=null,e}(s,d)}const b=g;function y(e){return new Promise((function(t,n){let r=new FileReader;r.onloadend=function(){const e=r.result.replace("data:","").replace(/^.+,/,"");t(e)},r.onerror=function(){n(r)},r.readAsDataURL(e)}))}function w(){document.querySelector(".structure").classList.toggle("hide"),document.querySelector(".input").classList.toggle("input__active")}function _(e,t){const n=document.getElementById("listFiles"),r=document.createElement("div"),i=document.createElement("div"),o=document.createElement("div"),c=document.createElement("p"),a=document.createElement("p"),s=document.createElement("input"),d=document.createElement("img"),l=document.createElement("img");r.setAttribute("class","filename-div"),i.setAttribute("id","fileNameContainerLeft"),o.setAttribute("id","fileNameContainerRight"),a.setAttribute("id","file-size"),l.setAttribute("id","trash-png"),c.textContent=e.name,a.textContent=function(e,t=!1,n=1){const r=t?1e3:1024;if(Math.abs(e)<r)return e+" B";const i=t?["KB","MB","GB","TB","PB","EB","ZB","YB"]:["KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"];let o=-1;const c=10**n;do{e/=r,++o}while(Math.round(Math.abs(e)*c)/c>=r&&o<i.length-1);return e.toFixed(n)+" "+i[o]}(e.size,!0),s.setAttribute("type","checkbox"),l.setAttribute("src","assets/trash.png"),d.setAttribute("src","assets/file-icon.png"),n.appendChild(r),i.appendChild(s),i.appendChild(d),i.appendChild(c),o.appendChild(a),o.appendChild(l),r.appendChild(i),r.appendChild(o),s.checked=!0,l.addEventListener("click",(()=>{const n=e.name;for(let e=0;e<t.length;e++)t[e].name===n&&t.splice(e,1);r.remove()}))}!async function(){await b();const t=[];!function(e){let t=document.getElementById("dropArea"),n=document.getElementById("fileElem");function r(e){e.preventDefault(),e.stopPropagation()}function i(){t.classList.add("highlight")}function o(){t.classList.remove("highlight")}n.onchange=()=>{for(const t of n.files)e.push(t),_(t,e)},["dragenter","dragover","dragleave","drop"].forEach((e=>{t.addEventListener(e,r,!1)})),["dragenter","dragover"].forEach((e=>{t.addEventListener(e,i,!1)})),["dragleave","drop"].forEach((e=>{t.addEventListener(e,o,!1)})),t.addEventListener("drop",(function(t){let n=t.dataTransfer.files;for(const t of n)e.push(t),_(t,e)}),!1)}(t),function(){const t=function(){try{const i=e.__wbindgen_add_to_stack_pointer(-16);e.hash_types(i);var t=p()[i/4+0],n=p()[i/4+1],r=function(t,n){t>>>=0;const r=(null!==h&&0!==h.byteLength||(h=new Uint32Array(e.memory.buffer)),h).subarray(t/4,t/4+n),i=[];for(let e=0;e<r.length;e++)i.push(m(r[e]));return i}(t,n).slice();return e.__wbindgen_free(t,4*n,4),r}finally{e.__wbindgen_add_to_stack_pointer(16)}}(),n=document.getElementById("dropdown-parent"),r=document.createElement("div"),i=function(){const e=document.createElement("div");e.classList="input",e.addEventListener("click",w);const t=document.createElement("div");t.classList="input__placeholder";const n=document.createElement("p");n.textContent="Select Hash",n.classList.add("placeholder");const r=document.createElement("img");return r.setAttribute("src","assets/chevron.png"),r.setAttribute("id","chevron"),t.appendChild(n),t.appendChild(r),e.appendChild(t),e}(),o=function(e){const t=document.createElement("div");return t.classList.add("structure","hide"),e.forEach((e=>{const n=document.createElement("div");n.addEventListener("click",(()=>function(e){const t=document.querySelector(".placeholder");t.textContent=e,t.classList.add("input__selected"),w()}(e))),n.setAttribute("id","option");const r=document.createElement("p");r.setAttribute("id","hashName"),r.textContent=e,n.appendChild(r),t.appendChild(n)})),t}(t);r.appendChild(i),r.appendChild(o),n.appendChild(r)}(),document.getElementById("hash-btn").addEventListener("click",(()=>{let n=[];t.length;const r=document.querySelector(".placeholder"),i=function(){const e=document.getElementsByClassName("filename-div");return Array.from(e).filter((e=>e.firstChild.childNodes[0].checked)).map((e=>e.firstChild.innerText))}(),c=t.filter((e=>i.includes(e.name)));for(let e=0;e<c.length;e++)n.push(y(c[e]));Promise.all(n).then((t=>{const n=t.join("");var i;i=function(t,n){let r,i;try{const g=e.__wbindgen_add_to_stack_pointer(-16),b=u(t,e.__wbindgen_malloc,e.__wbindgen_realloc),y=s,w=u(n,e.__wbindgen_malloc,e.__wbindgen_realloc),_=s;e.hasher(g,b,y,w,_);var c=p()[g/4+0],a=p()[g/4+1],d=p()[g/4+2],l=p()[g/4+3],f=c,h=a;if(l)throw f=0,h=0,m(d);return r=f,i=h,o(f,h)}finally{e.__wbindgen_add_to_stack_pointer(16),e.__wbindgen_free(r,i,1)}}(r.textContent,n),document.getElementById("returnFeild").value=i}))})),document.getElementById("copy-btn").addEventListener("click",(()=>{const e=document.getElementById("returnFeild");e.select(),navigator.clipboard.writeText(e.value).then((()=>{const e=document.querySelector(".copied");e&&(e.classList.add("animate"),e.addEventListener("animationend",(()=>e.classList.remove("animate"))))}))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,